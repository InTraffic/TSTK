##################################################
# file: otis_soap_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py --complexType OTIS_testinterface_v003.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.ns.nl/schemas/testinterface.xsd
##############################

class ns0:
    targetNamespace = "http://www.ns.nl/schemas/testinterface.xsd"

    class StartTreinstelOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StartTreinstelOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.StartTreinstelOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Bestemming", aname="_Bestemming", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Plaats", aname="_Plaats", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","StartTreinstelOpdracht")
            kw["aname"] = "_StartTreinstelOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    self._Bestemming = None
                    self._Plaats = None
                    return
            Holder.__name__ = "StartTreinstelOpdracht_Holder"
            self.pyclass = Holder

    class StopTreinstelOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StopTreinstelOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.StopTreinstelOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","StopTreinstelOpdracht")
            kw["aname"] = "_StopTreinstelOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    return
            Holder.__name__ = "StopTreinstelOpdracht_Holder"
            self.pyclass = Holder

    class PauzeerTreinstelOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PauzeerTreinstelOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.PauzeerTreinstelOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","PauzeerTreinstelOpdracht")
            kw["aname"] = "_PauzeerTreinstelOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    return
            Holder.__name__ = "PauzeerTreinstelOpdracht_Holder"
            self.pyclass = Holder

    class HervatTreinstelOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HervatTreinstelOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.HervatTreinstelOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","HervatTreinstelOpdracht")
            kw["aname"] = "_HervatTreinstelOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    return
            Holder.__name__ = "HervatTreinstelOpdracht_Holder"
            self.pyclass = Holder

    class PlaatsTreinstelOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "PlaatsTreinstelOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.PlaatsTreinstelOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="Plaats", aname="_Plaats", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","PlaatsTreinstelOpdracht")
            kw["aname"] = "_PlaatsTreinstelOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    self._Plaats = None
                    return
            Holder.__name__ = "PlaatsTreinstelOpdracht_Holder"
            self.pyclass = Holder

    class StopGPSDekkingOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StopGPSDekkingOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.StopGPSDekkingOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="GewenstGedrag", aname="_GewenstGedrag", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","StopGPSDekkingOpdracht")
            kw["aname"] = "_StopGPSDekkingOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    self._GewenstGedrag = None
                    return
            Holder.__name__ = "StopGPSDekkingOpdracht_Holder"
            self.pyclass = Holder

    class HervatGPSDekkingOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HervatGPSDekkingOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.HervatGPSDekkingOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="Treinstelnummer", aname="_Treinstelnummer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","HervatGPSDekkingOpdracht")
            kw["aname"] = "_HervatGPSDekkingOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Treinstelnummer = None
                    return
            Holder.__name__ = "HervatGPSDekkingOpdracht_Holder"
            self.pyclass = Holder

    class MaakTestcasesOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MaakTestcasesOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.MaakTestcasesOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="XmlFile", aname="_XmlFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","MaakTestcasesOpdracht")
            kw["aname"] = "_MaakTestcasesOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._XmlFile = None
                    return
            Holder.__name__ = "MaakTestcasesOpdracht_Holder"
            self.pyclass = Holder

    class MaakXMLBronBestandOpdracht_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MaakXMLBronBestandOpdracht"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.MaakXMLBronBestandOpdracht_Dec.schema
            TClist = [ZSI.TC.String(pname="XmlCode", aname="_XmlCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","MaakXMLBronBestandOpdracht")
            kw["aname"] = "_MaakXMLBronBestandOpdracht"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._XmlCode = None
                    return
            Holder.__name__ = "MaakXMLBronBestandOpdracht_Holder"
            self.pyclass = Holder

    class Status_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Status"
        schema = "http://www.ns.nl/schemas/testinterface.xsd"
        def __init__(self, **kw):
            ns = ns0.Status_Dec.schema
            TClist = [ZSI.TC.String(pname="Code", aname="_Code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.ns.nl/schemas/testinterface.xsd","Status")
            kw["aname"] = "_Status"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Code = None
                    return
            Holder.__name__ = "Status_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.ns.nl/schemas/testinterface.xsd)
