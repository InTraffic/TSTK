##################################################
# file: otis_soap_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py --complexType OTIS_testinterface_v003.wsdl
# 
##################################################

from otis_soap_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class OtisServiceLocator:
    OtisPort_address = "http://otis.ns.nl/otis_soap"
    def getOtisPortAddress(self):
        return OtisServiceLocator.OtisPort_address
    def getOtisPort(self, url=None, **kw):
        return OtisSoapBindingSOAP(url or OtisServiceLocator.OtisPort_address, **kw)

# Methods
class OtisSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: StartTreinstel
    def StartTreinstel(self, request, **kw):
        if isinstance(request, StartTreinstelOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/foo", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: StopTreinstel
    def StopTreinstel(self, request, **kw):
        if isinstance(request, StopTreinstelOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/stoptrein", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: PauzeerTreinstel
    def PauzeerTreinstel(self, request, **kw):
        if isinstance(request, PauzeerTreinstelOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/pauzeertrein", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: HervatTreinstel
    def HervatTreinstel(self, request, **kw):
        if isinstance(request, HervatTreinstelOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/hervattrein", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: PlaatsTreinstel
    def PlaatsTreinstel(self, request, **kw):
        if isinstance(request, PlaatsTreinstelOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/plaatstrein", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: StopGPSDekking
    def StopGPSDekking(self, request, **kw):
        if isinstance(request, StopGPSDekkingOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/stopgpsdekking", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: HervatGPSDekking
    def HervatGPSDekking(self, request, **kw):
        if isinstance(request, HervatGPSDekkingOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/hervatgpsdekking", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: MaakTestcases
    def MaakTestcases(self, request, **kw):
        if isinstance(request, MaakTestcasesOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/maaktestcases", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

    # op: MaakXMLBronBestand
    def MaakXMLBronBestand(self, request, **kw):
        if isinstance(request, MaakXMLBronBestandOpdrachtInput) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://otis.ns.nl/maakxmlbronbestand", **kw)
        # no output wsaction
        response = self.binding.Receive(OpdrachtOutput.typecode)
        return response

StartTreinstelOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "StartTreinstelOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

StopTreinstelOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "StopTreinstelOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

PauzeerTreinstelOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "PauzeerTreinstelOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

HervatTreinstelOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "HervatTreinstelOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

PlaatsTreinstelOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "PlaatsTreinstelOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

StopGPSDekkingOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "StopGPSDekkingOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

HervatGPSDekkingOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "HervatGPSDekkingOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

MaakTestcasesOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "MaakTestcasesOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass

MaakXMLBronBestandOpdrachtInput = GED("http://www.ns.nl/schemas/testinterface.xsd", "MaakXMLBronBestandOpdracht").pyclass

OpdrachtOutput = GED("http://www.ns.nl/schemas/testinterface.xsd", "Status").pyclass
